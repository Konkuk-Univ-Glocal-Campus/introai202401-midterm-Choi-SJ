import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
from torchvision import transforms, datasets
import matplotlib.pyplot as plt
import numpy as np
import random

# Define a transform to normalize the data
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

# Load the FashionMNIST dataset
trainset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=True, transform=transform)
testset = datasets.FashionMNIST('~/.pytorch/F_MNIST_data/', download=True, train=False, transform=transform)

train_len = 10000
valid_len = 1000

# Split the dataset into training, validation, and test sets
train_loader = torch.utils.data.DataLoader(trainset, batch_size=256, shuffle=True)
test_loader = torch.utils.data.DataLoader(testset, batch_size=256, shuffle=False)

# Define class names
class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat",
               "Sandal", "Shirt", "Sneaker", "Bag", "Ankle Boots"]

# Define the CNN model
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 64, 7, stride=3, padding=1)
        self.conv2 = nn.Conv2d(64, 128, 3, stride=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(128 * 5 * 5, 256)
        self.fc2 = nn.Linear(256, 128)
        self.dropout = nn.Dropout(0.3)
        self.fc3 = nn.Linear(128, 64)
        self.fc4 = nn.Linear(64, 10)

    def forward(self, x):
        x = self.pool(nn.functional.relu(self.conv1(x)))
        x = self.pool(nn.functional.relu(self.conv2(x)))
        x = x.view(-1, 128 * 5 * 5)
        x = nn.functional.relu(self.fc1(x))
        x = nn.functional.relu(self.fc2(x))
        x = self.dropout(x)
        x = nn.functional.relu(self.fc3(x))
        x = self.dropout(x)
        x = self.fc4(x)
        return x

# Initialize the model, loss function, and optimizer
model = CNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.000015)

# Train the model
for epoch in range(300):
    running_loss = 0.0
    for i, data in enumerate(train_loader, 0):
        inputs, labels = data
        optimizer.zero_grad()

        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        if i % 10 == 9:  # print every 10 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 10))
            running_loss = 0.0

print('Finished Training')

# Evaluate the model
correct = 0
total = 0
with torch.no_grad():
    for data in test_loader:
        images, labels = data
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (100 * correct / total))

# Visualize predictions
dataiter = iter(test_loader)
images, labels = dataiter.next()

outputs = model(images)
_, predicted = torch.max(outputs, 1)

plt.figure(figsize=(10, 4))
for idx in np.arange(5):
    ax = plt.subplot(1, 5, idx+1)
    plt.imshow(images[idx].numpy().squeeze(), cmap='gray')
    ax.set_title(f'Predicted: {class_names[predicted[idx]]}')
    ax.axis('off')

plt.show()

# Find and visualize wrong predictions
wrong_images = []
wrong_labels = []
correct_labels = []
with torch.no_grad():
    for data in test_loader:
        images, labels = data
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        wrong_pred = (predicted != labels).numpy()
        wrong_images.append(images[wrong_pred])
        wrong_labels.append(predicted[wrong_pred])
        correct_labels.append(labels[wrong_pred])
        if len(wrong_images) >= 5:
            break

plt.figure(figsize=(10, 4))
for idx in range(5):
    ax = plt.subplot(1, 5, idx+1)
    plt.imshow(wrong_images[idx][0].numpy().squeeze(), cmap='gray')
    ax.set_title(f'Pred: {class_names[wrong_labels[idx][0]]}\nActual: {class_names[correct_labels[idx][0]]}')
    ax.axis('off')

plt.show()
